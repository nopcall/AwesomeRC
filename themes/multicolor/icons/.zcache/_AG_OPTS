AG_OPTS=( '(- 1 *)--help[print a short help statement]' '(- 1 *)--man[print the manual page]' '(- 1 *)--version[display version and copyright information]' '--ackmate[output results in a format parseable by AckMate]' '(-A --after)-A[Print NUM lines before match. Default is 2]:number' '(-A --after)--after[Print NUM lines before match. Default is 2]:number' '(-t --all-text -a --all-types -u --unrestricted)-t[search all text files, excluding hidden ones]' '(-t --all-text -a --all-types -u --unrestricted)--all-text[search all text files, excluding hidden ones]' '(-a --all-types -t --all-text -u --unrestricted)-a[search all text files, excluding hidden ones and not obeying ignore files (.agignore, .gitignore...)]' '(-a --all-types -t --all-text -u --unrestricted)--all-types[search all text files, excluding hidden ones and not obeying ignore files (.agignore, .gitignore...)]' '(-B --before)-B[Print NUM lines after match. Defaults is 2]:number' '(-B --before)--before[Print NUM lines after match. Defaults is 2]:number' '(--nobreak --break)--nobreak[Print a newline between matches in different files. Default on.]' '(--nobreak --break)--break[Print a newline between matches in different files. Default on.]' '(--color --nocolor)--color[Print color codes in results. Default on.]' '(--nocolor --color --color-line-number --color-match --color-path)--nocolor[Do not print color codes in results. Default on.]' '(--nocolor)--color-line-number[Color codes for line numbers. Default is 1;33.]' '(--nocolor)--color-match[Color codes for result match numbers. Default is 30;43.]' '(--nocolor)--color-path[Color codes for path names. Default is 1;32.]' '--column[print column numbers in results]' '(-C --context)-C[Print NUM lines before and after matches. Default is 2.]:number' '(-C --context)--context[Print NUM lines before and after matches. Default is 2.]:number' '(-D --debug)-D[enable debug logging]' '(-D --debug)--debug[enable debug logging]' '(-G --file-search-regex)-G[only search file names matching PATTERN]:pattern' '(-G --file-search-regex)--file-search-regex[only search file names matching PATTERN]:pattern' '(-l --files-with-matches)-l[only print filenames containing matches, not matching lines]' '(-l --files-with-matches)--files-with-matches[only print filenames containing matches, not matching lines]' '(-L --files-without-matches)-L[only print filenames that don'\''t contain matches]' '(-L --files-without-matches)--files-without-matches[only print filenames that don'\''t contain matches]' '(-f --follow)-f[follow symlinks]' '(-f --follow)--follow[follow symlinks]' '(-g)-g[print filenames that match PATTERN]:pattern' '(--nogroup --group)--nogroup[same as --\[no\]break --\[no\]heading]' '(--nogroup --group)--group[same as --\[no\]break --\[no\]heading]' '--hidden[search hidden files, still obeys ignore files.]' '*--ignore[Ignore files/directories matching this pattern. Literal file and directory names are also allowed.]:files:_files' '(-i --ignore-case)-i[match case insensitively]:pattern' '(-i --ignore-case)--ignore-case[match case insensitively]:pattern' '*--ignore-dir[alias for --ignore for compatibility with ack]:files:_files' '(-v --invert-match)-v[invert match]' '(-v --invert-match)--invert-match[invert match]' '(-Q --literal)-Q[match PATTERN literally, no regular expression]' '(-Q --literal)--literal[match PATTERN literally, no regular expression]' '(-m --max-count)-m[Skip the rest of a file after NUM matches. Default is 10,000.]:number' '(-m --max-count)--max-count[Skip the rest of a file after NUM matches. Default is 10,000.]:number' '(--pager --nopager)--pager[Display results with PAGER. Disabled by default.]:pager program:_command_names' '(--pager --nopager)--nopager[Display results with PAGER. Disabled by default.]:pager program:_command_names' '(--passthrough)--passthrough[when searching a stream, print all lines even if they dont match]' '(-p --path-to-agignore)-p[provide a path to a specific .agignore file]:files:_files' '(-p --path-to-agignore)--path-to-agignore[provide a path to a specific .agignore file]:files:_files' '--print-long-lines[print matches on very long lines, > 2k characters by default]' '--search-binary[search binary files]' '(-U --skip-vcs-ignores)-U[ignore VCS ignore files (.gitigore, .hgignore, svn:ignore), but still use .agignore]' '(-U --skip-vcs-ignores)--skip-vcs-ignores[ignore VCS ignore files (.gitigore, .hgignore, svn:ignore), but still use .agignore]' '(-S --smart-case)-S[match case sensitively if PATTERN contains any uppercase letters, else match case insensitively]' '(-S --smart-case)--smart-case[match case sensitively if PATTERN contains any uppercase letters, else match case insensitively]' '--stats[print stats (files scanned, time taken, etc)]' '(-u --unrestricted -t --all-text -a --all-types)-u[search ALL files, includes: hidden, binary & ignored files (.agignore, .gitignore...)]' '(-u --unrestricted -t --all-text -a --all-types)--unrestricted[search ALL files, includes: hidden, binary & ignored files (.agignore, .gitignore...)]' '(-w --word-regexp)-w[only match whole words]' '(-w --word-regexp)--word-regexp[only match whole words]' '--actionscript[.as.mxml]' '--ada[.ada.adb.ads]' '--asm[.asm.s]' '--batch[.bat.cmd]' '--cc[.c.h.xs]' '--cfmx[.cfc.cfm.cfml]' '--clojure[.clj.cljs.cljx]' '--coffee[.coffee]' '--cpp[.cpp.cc.C.cxx.m.hpp.hh.h.H.hxx]' '--csharp[.cs]' '--css[.css]' '--delphi[.pas.int.dfm.nfm.dof.dpk.dproj.groupproj.bdsgroup.bdsproj]' '--elisp[.el]' '--erlang[.erl.hrl]' '--fortran[.f.f77.f90.f95.f03.for.ftn.fpp]' '--gettext[.po.pot.mo]' '--go[.go]' '--groovy[.groovy.gtmpl.gpp.grunit]' '--haml[.haml]' '--haskell[.hs.lhs]' '--hh[.h]' '--html[.htm.html.shtml.xhtml]' '--ini[.ini]' '--jade[.jade]' '--java[.java.properties]' '--js[.js]' '--json[.json]' '--jsp[.jsp.jspx.jhtm.jhtml]' '--less[.less]' '--liquid[.liquid]' '--lisp[.lisp.lsp]' '--lua[.lua]' '--m4[.m4]' '--make[.Makefiles.mk.mak]' '--markdown[.markdown.mdown.mdwn.mkdn.mkd.md]' '--mason[.mas.mhtml.mpl.mtxt]' '--matlab[.m]' '--mercury[.m.moo]' '--objc[.m.h]' '--objcpp[.mm.h]' '--ocaml[.ml.mli.mll.mly]' '--octave[.m]' '--parrot[.pir.pasm.pmc.ops.pod.pg.tg]' '--perl[.pl.pm.pm6.pod.t]' '--php[.php.phpt.php3.php4.php5.phtml]' '--plone[.pt.cpt.metadata.cpy.py]' '--python[.py]' '--rake[.Rakefiles]' '--rs[.rs]' '--ruby[.rb.rhtml.rjs.rxml.erb.rake.spec]' '--rust[.rs]' '--salt[.sls]' '--sass[.sass.scss]' '--scala[.scala]' '--scheme[.scm.ss]' '--shell[.sh.bash.csh.tcsh.ksh.zsh]' '--smalltalk[.st]' '--sql[.sql.ctl]' '--stylus[.styl]' '--swift[.swift]' '--tcl[.tcl.itcl.itk]' '--tex[.tex.cls.sty]' '--tt[.tt.tt2.ttml]' '--vala[.vala.vapi]' '--vb[.bas.cls.frm.ctl.vb.resx]' '--verilog[.v.vh.sv]' '--vhdl[.vhd.vhdl]' '--vim[.vim]' '--xml[.xml.dtd.xsl.xslt.ent]' '--yaml[.yaml.yml]' '(- 1 *)--list-file-types[list supported filetypes to search]' '--silent[suppress all log messages, including errors]' '(-z --search-zip)-z[search contents of compressed files]' '(-z --search-zip)--search-zip[search contents of compressed files]' '(-s --case-sensitive)-s[Match case sensitively. Default on.]' '(-s --case-sensitive)--case-sensitive[Match case sensitively. Default on.]' '(-H --noheading --heading)-H[print file names above matching contents]' '(-H --noheading --heading)--noheading[print file names above matching contents]' '(-H --noheading --heading)--heading[print file names above matching contents]' '--vimgrep[output results like vims, :vimgrep /pattern/g would (report every match on the line)]' '(-0 --null --print0)-0[separate the filenames with \\0, rather than \\n]' '(-0 --null --print0)--null[separate the filenames with \\0, rather than \\n]' '(-0 --null --print0)--print0[separate the filenames with \\0, rather than \\n]' '(-c --count)-c[only print the number of matches in each file]' '(-c --count)--count[only print the number of matches in each file]' '--depth[Search up to NUM directories deep, -1 for unlimited. Default is 25.]:number' '(-F --fixed-strings)-F[alias for --literal for compatibility with grep]' '(-F --fixed-strings)--fixed-strings[alias for --literal for compatibility with grep]' '(--nofilename --filename)--nofilename[Print file names. Default on, except when searching a single file.]' '(--nofilename --filename)--filename[Print file names. Default on, except when searching a single file.]' '(--nonumbers --numbers)--nonumbers[Print line numbers. Default is to omit line numbers when searching streams]' '(--nonumbers --numbers)--numbers[Print line numbers. Default is to omit line numbers when searching streams]' '(-o --only-matching)-o[print only the matching part of the lines]' '(-o --only-matching)--only-matching[print only the matching part of the lines]' '*: :_files' )
